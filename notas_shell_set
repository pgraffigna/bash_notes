## oh-my-bash en Ubuntu 20.04
bash -c "$(curl -fsSL https://raw.githubusercontent.com/ohmybash/oh-my-bash/master/tools/install.sh)"

## agregar las fuentes necesarias
apt-get install fonts-powerline

# tema para oh-my-bash
# editar la linea en .bashrc
OSH_THEME="powerline"

-------------------
## powerline-go en Ubuntu 18.04
sudo add-apt-repository ppa:longsleep/golang-backports
sudo apt update && sudo apt install -y golang-go
go get -u github.com/justjanne/powerline-go

# agregar esto en ~/.bashrc
GOPATH=$HOME/go
function _update_ps1() {
    PS1="$($GOPATH/bin/powerline-go -error $?)"
}
if [ "$TERM" != "linux" ] && [ -f "$GOPATH/bin/powerline-go" ]; then
    PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"
fi

------------------------
## oh-my-posh en Powershell
Install-Module posh-git -Scope CurrentUser --> si usas git en Windows
Install-Module oh-my-posh -Scope CurrentUser

# ejecutar "notepad $PROFILE" y agregar estas lineas:
Import-Module posh-git --> si usas git en Windows
Import-Module oh-my-posh
Set-PoshPrompt -Theme Paradox

# Instalar las fuentes "Cascadia Code PL" para todos los usuarios
https://github.com/microsoft/cascadia-code/releases/tag/v2102.25

# Editar setting.json en Windows Terminal

"profiles":
    	{
        "defaults": {
		"fontFace": "Cascadia Code PL",
	        "fontSize": 11
	},
}

# Default path donde inicia Windows Terminal
cd ~

# Para entrar en los directorios solo tipeando el nombre
shopt -s autocd

# buscar en el historial 
# Create ~/.inputrc and fill it with this:
"\e[A": history-search-backward
"\e[B": history-search-forward

# tmux copy-mode
prefix + [ # copy mode
ctrl + space # seleccionar texto 
ctrl + w # copia
prefix + ] # pega# bash_notes

#############################################
# Funciones -- agregar al archivo ~/.bashrc #	
############################################# 

# compartida portable con docker
smbportable(){
local sharename
	[[ -z $1 ]] && sharename="SHARE" || sharename=$1
	docker run --rm -it -p 445:445 -v "${PWD}:/tmp/serve" rflathers/impacket smbserver.py -smb2support $sharename /tmp/serve
}

# crackmapexec dockerizado --necesita una DIRECCIÓN DE RED como argumento
cme(){
	docker run -it --rm byt3bl33d3r/crackmapexec smb $1/24
}

# función para conexiones remotas vía RPD -- necesita USUARIO PASSWORD IP como argumentos
rdp(){
  	xfreerdp /u:$1 /p:$2 /size:1024x768 /f /v:$3
}

# consulta la ip pública
myip(){ 
  	curl -s ifconfig.me/all | grep ip_addr | awk '{print $2}'
}

# escaneo masivo de MACs
mscan(){ 
  	sudo masscan ip/cidr --arp > FILE
}

# usa el archivo generado por la función mscan para resolver los nombres de host
mscanHOST(){
  	for ips in $(cat FILE | awk '{print $6}');do host $ips; done
}

# chequeo de la configuración de nagios
check_nagios(){ 
  	/usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg
}

# consulta la ip de los contenedores
dockip(){
  	docker inspect -f "{{ .NetworkSettings.IPAddress }}" $1
}

# funcion para crear estructura de trabajo para proyectos con Ansible
mkansible(){
RUTA_FULL=ansible_role_template/roles/template/
RUTA=ansible_role_template/

       mkdir -p "${RUTA_FULL}"{tasks,vars,handlers,files,defaults} && touch "${RUTA_FULL}"{tasks/main.yml,vars/main.yml,handlers/main.yml,defaults/main.yml}
       touch "$RUTA"{ansible.cfg,inventory,main.yml} 
}

# funcion para copiar en la clipboard los puertos de un escaneo NMAP
function nports(){
    "grep 'tcp' $1 | awk '{print $1}' FS='/' | tr '\n' ',' | xclip -sel clip"
}

################################################
# Alias					       #	
# agregar los alias al archivo ~/.bash_aliases #
# sino existe crear                            #
# touch ~/.bash_aliases                        #
################################################

# inicia una conexión VPN
alias vpn_cultura="cd ~/vpn && sudo openvpn archivo.ovpn"

# Muestra el nivel de batería
alias check_battery="upower -i /org/freedesktop/UPower/devices/battery_BAT1 | grep percentage | awk 'NF{print $NF}'"

# Batcat --> apt install -y bat
alias cat="batcat"

# Apagar linux remoto
# en equipo remoto USUARIO ALL=(ALL) NOPASSWD:/sbin/shutdown -h 0
alias apagar_omv_remoto="ssh -t omv 'sudo /sbin/shutdown -h 0'"

# Apagar windows remoto
alias apagar_win10_remoto="ssh -o ServerAliveInterval=1 -o ServerAliveCountMax=1 win10 shutdown /h /f"

# HOME del usuario en Windows WSL
alias win="/mnt/c/Users/quentin/" 

# Info sobre el cpu
alias cpu="lscpu | egrep 'Model name|Socket|Thread|NUMA|CPU\(s\)'"

# escritorio remoto via rdp
alias rdp_note="xfreerdp /u:usuario /p:password /v:192.168.0.17 /cert:ignore +clipboard /dynamic-resolution &>/dev/null &"

# muestra los ssh alias configurados
alias ssh_alias="sed -rn 's/^\s*Host\s+(.*)\s*/\1/ip' ~/.ssh/conf.d/*.conf"

# grep con colores
alias grep="grep --color=auto"

# ls con colores y muestra los directorios primero 
alias ls="ls --color=auto --group-directories-first"

# bajar audio de videos de youtube con youtube-dl 
alias ytmp3="youtube-dl -x --audio-format mp3"

# copia archivos a vagrant host sin guardar host_keys
alias vscp='scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'

##########################################
# Notas                                  #
##########################################

# Agrega la fecha a la salida del comando HISTORY
export HISTTIMEFORMAT="%d/%m/%y %T "

# notificación por pantalla en Linux
sudo apt install libnotify-bin
notify-send  "NOTIFICACION" -t 20000 -i /mnt/c/Users/quentin/Downloads/imagen.jpg

# iniciar página en firefox kiosk mode   
"C:\Program Files\Mozilla Firefox\firefox.exe" -kiosk URL

# Prompt personalizado
USUARIO@HOSTNAME:/PATH:COD_STATUS> 
export PS1="\[$(tput bold)\]\[\033[38;5;4m\]\u\[$(tput sgr0)\]@\[$(tput sgr0)\]\[\033[38;5;1m\]\h\[$(tput sgr0)\]:\[$(tput sgr0)\]\[\033[38;5;11m\]\w\[$(tput sgr0)\]:\[$(tput sgr0)\]\[\033[38;5;2m\]\$?\[$(tput sgr0)\]>\[$(tput sgr0)\]"


